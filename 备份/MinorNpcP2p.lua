---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by admin.
--- DateTime: 2024/1/24 13:44
--- 次要npc 路点
local MinorNpcP2p = class(LuaAction)

function MinorNpcP2p:ctor(btData)
    LuaAction:ctor(btData)
    self.tableName = "MinorNpcP2p"
    self.isBegin = false
end

function MinorNpcP2p:TempInit()

end

function MinorNpcP2p:OnBegin()
    if not self.params.unit.moveCtrl then
        logError("次要npc路点移动 对象未注册moveCtrl")
        return BTStatus.BTS_ERROR
    end

    self.pointList = self.params.pointList
    self.avatar = self.params.unit
    self.extraBehaviorList = self.params.extraBehaviors
    self.is_loop = self.params.loop[1]
    self.loopType = self.params.loop[2]

    self.index = self.params.initIndex -- 进程索引
    self.count = #self.pointList

    self.is_allowPause = false -- 是否允许暂停
    self.is_pause = false -- 是否暂停中
    self.is_start = true -- 是否已经启动
    self.is_timerUpdate = false

    self.awaitTimer = nil
    self.is_await = false

    self.tempPoint = nil -- 额外行为中间变量 路点
    self.tempAnimation = nil -- 额外行为中间变量 动作等待
    self.extraEndList = {} -- 记录执行过的额外行为
    self.tempSpecial = {} -- 特殊配置标志

    self.wait_time = 0
    if self.count <= 0 then
        return BTStatus.BTS_FAILURE
    end

    self.isBegin = true
    return BTStatus.BTS_RUNNING
end

function MinorNpcP2p:OnUpdate()
    if self.is_timerUpdate then
        self:SelfUpdate()
    end

    if not self.is_pause and self.is_await then -- 是否处于等待时间中并对等待计时进行更新
        self.wait_time = self.wait_time - Time.deltaTime
        if self.wait_time <= 0 then
            self.avatar:StopAnimation(self.awaitAnimation) -- 强制停止当前所有动作
            self.avatar.pathData:SetExtraBehavior2Occ(self.index,false)
            self.is_await = false
        end
    end

    if not Scene.loaded then -- 是否正常场景加载中
        return BTStatus.BTS_RUNNING
    end

    if self.is_pause or not self.isBegin then -- 是否被处于暂停 ，且未执行过开始
        return BTStatus.NONE
    end

    self.navStatus = self.avatar.moveCtrl:GetMoveStatus()
    local status = self.navStatus

    if self.is_await or status == NavStatus.Runing or not self.is_start then -- 判断行为执行状态
        return BTStatus.BTS_RUNNING
    end

    if status == NavStatus.Break then
        return BTStatus.BTS_FAILURE
    end

    if status == NavStatus.None or status == NavStatus.End then -- 判断是否需要更新进度
        local param,type = self:GetP2pInfo2Index()
        LPrint.log(ColorCode.Red, param)
        if param then
            if type == 1 then
                -- 移动
                return self:ToMoveLine(param)
            elseif type == 2 then
                -- 站立等待
                return self:ToAwait(param)
            elseif type == 3 then
                -- 气泡对话
                return self:ShowBubble(param)
            end
        else
            return BTStatus.BTS_ERROR
        end
    end
    return BTStatus.BTS_RUNNING
end

---@ 通过路点进行的index获取路径数据
function MinorNpcP2p:GetP2pInfo2Index()
    local tempIndex = self:RefreshIndex()
    if tempIndex == 0 then
        self.avatar:P2pEnd()
        return nil
    end

    -- 判断是否寄存有临时额外动作等待需要执行
    local animationParam = self:GetExtraAnimation()
    if animationParam then
        return animationParam,2
    end

    if not self.extraEndList[tempIndex] then
        --  获取当前行为是否需要执行额外行为
        local isEx , type,behaviorParam = self:GetExtraBehavior(tempIndex)
        if isEx then
            self.extraEndList[tempIndex] = true
            -- 继承上一个点位的移动速度
            if type == 1 then
                local moveType =  self.pointList[tempIndex-1][4]
                table.insert(behaviorParam,moveType)
            end
            self.index = tempIndex
            return behaviorParam, type
        end
    end

    local param = self.pointList[tempIndex]
    self.index = tempIndex
    return param , 1
end

function MinorNpcP2p:RefreshIndex()

    local tempIndex = 1
    if self.loopType == 0 then
        -- 首尾相连
        if self.index == self.count then -- 列表执行完毕
            if self.is_loop then
                --
                tempIndex = 1
            else
                -- 行为执行完毕 通知模型数据进行回收
                return 0
            end
        else
            tempIndex = self.index + 1
        end
    elseif self.loopType == 1 then
        -- 逆向
        if self.index == 1 then
            self.is_change = false
        elseif  self.index == self.count then
            if self.is_loop then
                self.is_change = true
            else
                -- 行为执行完毕 通知模型数据进行回收
                return 0
            end
        end
        tempIndex = self.is_change and self.index - 1 or self.index + 1
    end
    return tempIndex
end

---@ 执行等待
function MinorNpcP2p:ToAwait(data)
    if not data or type(data) ~= "table" then
        return BTStatus.BTS_ERROR
    end

    LPrint.log(ColorCode.Red , "将要执行的额外行为逻辑：" ,data)

    local target = nil
    if self.tempSpecial[1] and self.tempSpecial[2] == 1 then
        -- 有指定的观察目标
        local group = UnitManager.GetMinorNpcGroup(self.avatar.groupId)
        -- 如果有多个同id的npc优先取第一个
        for _, v in pairs(group) do
            if v.data.id == self.tempSpecial[3] then
                target = v
                break
            end
        end
        --UnitManager.GetUnit("minor_npc", )
    end
    self.avatar:LookAtTarget(target)
    self.avatar:SetRotation(tonumber(data.look))
    self:ShowBubble(data.bubble)
    self.is_await = true
    self.wait_time = tonumber(data.time)
    self.awaitAnimation = data.animationName
    self.avatar:PlayAnimation(data.animationName,nil,nil,nil,true)
    return BTStatus.BTS_RUNNING
end

---@ 调用moverCtrl进行移动
function MinorNpcP2p:ToMoveLine(data)
    if not data or type(data) ~= "table" then
        return BTStatus.BTS_ERROR
    end

    self:StopUpdate()

    if #data < 2 then
        return BTStatus.BTS_ERROR
    end

    self.target_x = data[1]
    self.target_y = data[3]
    self.actionType = data[4]

    self.is_start = true
    self.avatar:LookAt(self.target_x,self.target_y)
    self.avatar:P2pMoveTo(self.target_x,self.target_y,self.actionType)

    return BTStatus.BTS_RUNNING
end

function MinorNpcP2p:ShowBubble(id)
    if id == nil or string.isNullOrEmpty(id) or id == 0 then
        return BTStatus.BTS_RUNNING
    end

    self.avatar:ShowBubble(tonumber(id))

    return BTStatus.BTS_RUNNING
end

--region [[额外行为]]

---@ 获取额外行为动作
function MinorNpcP2p:GetExtraAnimation()
    if not self.tempAnimation then
        return false
    end
    local spInfo = string.split(self.tempAnimation,"$")
    local animationName = string.split(spInfo[2],'：')[2]
    local animationInfo = {
        time = spInfo[1],
        animationName = animationName,
        look = spInfo[3],
        bubble = spInfo[4]
    }
    self.tempAnimation = nil
    return animationInfo
end

---@ 查询该角色组是否在特殊的行为配置中
function MinorNpcP2p:GetSpecialBehavior(behaviorParam)
    for i = 9, #behaviorParam do
        if string.isNullOrEmpty(behaviorParam[i]) then
            return
        end
        local a = string.split(behaviorParam[i],"@")
        local num = tonumber(a[1])
        if num == self.avatar.data.originalGroup then
            self.tempSpecial = {tonumber(a[1]), tonumber(a[2]), tonumber(a[3])}
            return  true, a
        end
    end
    return false
end

function MinorNpcP2p:GetSpecialCfg(cfg)
    -- 查找改角色对应的配置
    local group = string.split(cfg[#cfg], "#")
    for _, v in pairs(group) do
        local one = string.split(v, "$")
        if tonumber(one[1]) == self.avatar.id then
            return one, v
        end
    end
end

function MinorNpcP2p:GetExtraBehavior(index)
    local isEx,behaviorParam = self:ExtraBehavior2WeightGroup(index)
    self.avatar.ExtraState = isEx
    self.avatar.ExtraParam = behaviorParam
    if not isEx then
        return false
    end

    -- 判断行为类型
    -- 是否基于特殊的配置
    local isSpecial, special = self:GetSpecialBehavior(behaviorParam)
    if isSpecial then
        local data = self:GetSpecialCfg(special)
        if tonumber(data[2]) == 1 then
            -- 仅气泡
            return true ,3 , tonumber(data[#data])
        elseif tonumber(data[2]) == 0 then
            self.tempAnimation = data[3] .."$".. data[4] .."$".. data[5] .."$".. (data[6] or "")
            self.avatar.pathData:SetExtraBehavior2Occ(index,true)
            local offset = self.avatar.data.exOffset
            return true, 1 , {behaviorParam[6] + offset[1],behaviorParam[7] + offset[2],behaviorParam[8] + offset[3]}
        end
    end
    if behaviorParam[2] == 1 then
        -- 仅气泡
        return true ,3 , tonumber(behaviorParam[4])
    elseif behaviorParam[2] == 0 then
        -- 移动到其他位置后进行动作等待
        -- 暂时考虑使用中间变量来存储数据
        self.tempAnimation = behaviorParam[4]
        self.avatar.pathData:SetExtraBehavior2Occ(index,true)
        return true, 1 , {behaviorParam[6],behaviorParam[7],behaviorParam[8]}
    end
end

-- 考虑到npc队列是有序的,当组中第一个触发随机时即可视为全部随机,第一个不触发即全部不触发
function MinorNpcP2p:ExtraBehavior2WeightGroup(index)
    local originalGroupId =  self.avatar.data.originalGroup
    local group = UnitManager.GetMinorNpcGroup(self.avatar.groupId)
    local minIndex = math.huge
    local one = nil
    for _, v in pairs(group) do
        if v.data.originalGroup == originalGroupId then
           -- 第一个符合条件的 [self.avatar.index 最小的那个]
            if v.index < minIndex then
                one = v
                minIndex = math.min(minIndex, v.index)
            end
        end
    end
    if self.avatar.index == minIndex or (not one) then
        return self:ExtraBehavior2WeightStr(index)
    else
        return one.ExtraState, one.ExtraParam
    end
end


---@ 权重随机
function MinorNpcP2p:ExtraBehavior2WeightStr(index)
    if self.avatar.pathData:IsExtraBehaviorOcc(index) then
        return false
    end

    local info = self.extraBehaviorList[index]
    if not info then
        return false
    end
    local baseId = self.avatar.npcBaseCfg.id
    local tab = {} -- 需要进行权重计算的行为
    for _, v in ipairs(info) do
        local eliminateState = self:GetBehavior2Eliminate(v[5],baseId)
        if eliminateState == 2 then
            return true,v
        elseif eliminateState == 0 then
            table.insert(tab,v)
        end
    end
    local param = self:ExtraWeight(tab)
    if param then
        return true,param
    end
    return false
end

---@ 通过baseId判断当前是否被做过限制
---@ param table string 剔除列表
---@ param baseId number npcBaeId
---@ return number  |0：进行权重随机 1：剔除 2：必定执行|
function MinorNpcP2p:GetBehavior2Eliminate(table, baseId)
    local spInfo = string.split(table,'$')
    for _, v in ipairs(spInfo) do
        if string.contains(v,baseId.."") then
            local sv = string.split(v,'#')
            return tonumber(sv[2])
        end
    end
    return 0
end

local function CalculateProbabilities(list)

    local totalWeight = 0
    for _, t in ipairs(list) do
        totalWeight = totalWeight + t[3]
    end

    local probabilities = {}
    local cumulativeProbability = 0

    for _, v in ipairs(list) do
        local probability = v[3] / totalWeight
        cumulativeProbability = cumulativeProbability + probability
        table.insert(probabilities,cumulativeProbability)
    end

    return probabilities
end

---@ 权重计算
function MinorNpcP2p:ExtraWeight(infoTable)

    if infoTable == nil or #infoTable == 0 then
        return nil
    end

    local probabilities  =  CalculateProbabilities(infoTable)

    local randomNumber = math.random(0,2)
    for i, v in ipairs(probabilities) do
        if true then
            return infoTable[i]
        end
    end

    return nil
end




--endregion

function MinorNpcP2p:StartUpdate()

end

function MinorNpcP2p:StopUpdate()
    if self.update then
        Timer.Stop(self.update)
        self.update = nil
    end
    self.is_timerUpdate = false
end

function MinorNpcP2p:SelfUpdate()

end

function MinorNpcP2p:OnReset()

end

function MinorNpcP2p:OnPause()

end

function MinorNpcP2p:OnResume()

end

function MinorNpcP2p:OnEnd()
    self.extraEndList = {}
    self.tempSpecial = {}
    self.tempAnimation = nil
end

function MinorNpcP2p:PoolReset()

end


return MinorNpcP2p