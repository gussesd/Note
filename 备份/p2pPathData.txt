---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by admin.
--- DateTime: 2024/1/18 15:00
---
local P2pPathData = class()

function P2pPathData:ctor()
    self:PoolCtor()
end

RANDOM_TIME_RANGE = 10

function P2pPathData:PoolCtor()
    self.data = nil

    self.instGroupList = {}
    self.instGroupCfgList = {}
    self.tempNextTimeList = {}
    self.instGroupCount = 0
    self.p2pListCount = 0
    self.extraBehaviorList = {}
    self.volume = 0 -- 最大容量 需要从配置表中获取
    self.intervalTime = {} --  间隔时间 需要从配置中获取
    self.tempIndexArray = {}
    self.potIndexArray = {}
    self.nextShowTimer = {}
    self.extraBehavior2OccList = {}
end

function P2pPathData:PoolReset()
    for _, v in pairs(self.nextShowTimer) do
        Timer.Stop(v)
    end
    self.nextShowTimer = {}

    self:RecycleAllUnit()
    self.instGroupList = {}
    self.instGroupCfgList = {}
    self.tempNextTimeList = {}
    self.instGroupCount = 0
    self.p2pListCount = 0
    self.extraBehaviorList = {}
    self.volume = 0 --  最大容量 需要从配置表中获取
    self.intervalTime = {} --  间隔时间 需要从配置中获取
    self.tempIndexArray = {}
    self.potIndexArray = {}
    self.extraBehavior2OccList = {}
end

function P2pPathData:Init(data)
    self.data = data
    self.instGroupCfgList = P2pPathCfgMgr.GetInstGroupList(self.data.inst_group_list)
    self.instGroupCount = #self.data.inst_group_list
    self.p2pListCount = #self.data.list

    self.volume = self.instGroupCount < self.data.volume and self.instGroupCount or self.data.volume -- 防止配置最大数量大于列表数据
    self.volume = self.data.is_loop[1] == 1 and 1 or self.volume -- 如果是循环模式则默认最大1

    self.intervalTime = self.data.intervalTime_timer

    for _, v in ipairs(self.data.inst_group_list) do
        table.insert(self.tempIndexArray, v)
    end

    for i = 1, #self.data.list do
        table.insert(self.potIndexArray, i)
    end
    self:InitExtraBehavior()
    self:InitModel()
end

---@  初始化模型
function P2pPathData:InitModel()
    for _ = 1, self.volume do
        self:CreateDataInfo(true)
    end
end

---@ 初始化额外行为
function P2pPathData:InitExtraBehavior()
    self.extraBehaviorList = P2pPathCfgMgr.GetExtraBehavior2Cfg(self.data)
end

function P2pPathData:CreateDataInfo(is_init)
    local data = self:GetInstModel()
    local units = self:ShowUnit2InstGroupCfg(data.instGroupCfg, is_init)
    data.units = units
    self.instGroupList[data.instGroupCfg.id] = data
end

---@ 生出模型组
function P2pPathData:ShowUnit2InstGroupCfg(instGroupCfg, is_init)
    local units = {}

    local pointIndex = 1
    --if is_init and self.data.is_loop[1] ~= 1 then
    --    -- 从路点中获取随机起点 ,如果是循环节点 则默认从第一个坐标开始
    --    pointIndex = self:GetRandomElement(self.potIndexArray)
    --end

    local timeOff = Time.unscaledDeltaTime
    for index, info in ipairs(instGroupCfg.npc_list) do
        local cfg = ConfigManager.GetConfig(ConfigName.NpcBase, info[1])
        if cfg then
            local unit = self:ShowUnit2RandomPoint(cfg, pointIndex, index, instGroupCfg, info,timeOff)
            table.insert(units, unit)
        end
    end
    return units
end

---@ 将unit随机生成在路点上
function P2pPathData:ShowUnit2RandomPoint(data, p2pPotIndex, index, instGroupCfg, showInfo,timeOff)
    local unit = UnitManager.GetMinorNpc((instGroupCfg.id * 10) + index)
    local pos, points = self:CalculateChildPosition(index, instGroupCfg, p2pPotIndex)
    local infoData = {
        cfg = data,
        id = data.id,
        pos = pos,
        groupId = (instGroupCfg.id * 10) + index,
        baseId = self.data.id,
        isShowName = showInfo[2] == 1,
        show_name = showInfo[3],
    }
    if not unit then
        unit = UnitManager.CreateMinorNpc(infoData)
    end
    unit:SetP2pIndex(points, p2pPotIndex, self.data.is_loop, self.extraBehaviorList,timeOff,self)
    return unit
end

---@ 根据队列判断计算排列并针对偏移量计算移动路点
function P2pPathData:CalculateChildPosition(index, data, p2pPotIndex)
    local offset = self:SetPos2Layer(index, data)
    local initPos = {}
    if data.constraint_type[1] == 0 then
        -- 竖排只用处理初始化位置
        initPos = self:SetPos2LayerInVertical(index, data, p2pPotIndex)
        LPrint.log(ColorCode.Yellow , "计算出的排列坐标 ", initPos)
    else
        initPos = self:GetWorldPositionExample(self.data.list[p2pPotIndex], offset)
    end

    local points = {}
    for _, v in ipairs(self.data.list) do
        local tempPos = self:GetWorldPositionExample(v, offset)
        table.insert(tempPos, v[4])
        table.insert(points, tempPos)
    end
    return initPos, points
end

function P2pPathData:GetWorldPositionExample(a, b)
    local p = {
        a[1] + b[1],
        a[2] + b[2],
        a[3] + b[3]
    }
    return p
end

---@ 设计布局排版
function P2pPathData:SetPos2Layer(index, data)

    local rowCount = 1
    local columCount = data.constraint_type[2] -- 行数

    if data.constraint_type[1] == 0 then
        -- 排列方式
        return { 0, 0, 0 }
    else
        if data.alignment_type == 1 then
            index = index - 1
        elseif data.alignment_type == 2 then
            index = index - 2
        end

        columCount = Mathf.Ceil(#data.npc_list / rowCount)

        local rowIndex = index / columCount
        local columnIndex = index % columCount

        local xOffset = columnIndex * data.spacing[1]
        local zOffset = rowIndex * data.spacing[2]

        local alignOffsetX = (columCount - 1) * data.spacing[1] * 0.5 * (2 - data.alignment_type)
        local alignOffsetZ = (rowIndex - 1) * data.spacing[2] * 0.5 * (2 - data.alignment_type)

        return { xOffset - alignOffsetX, 0, zOffset - alignOffsetZ }
    end
end

function P2pPathData:SetPos2LayerInVertical(index, data, p2pPotIndex)

    if data.constraint_type[1] ~= 0 then
        return
    elseif not self.data.list[p2pPotIndex + 1] then
        -- 恰好是终点
        return self.data.list[p2pPotIndex]
    end

    --计算起始点和下一个点位的距离
    local startPos = self.data.list[p2pPotIndex]
    local endPos = self.data.list[p2pPotIndex + 1]
    local dis = self:TempV3GetDistance(startPos, endPos)
    local rat = data.spacing[2] / dis;
    local cIndex = 0
    local isCo = false

    -- 根据排版进行插值计算
    if data.alignment_type == 0 then
        -- 靠前
        cIndex = 1
    elseif data.alignment_type == 1 then
        -- 居中
        cIndex = #data.npc_list / 2
        local isDecimal = cIndex % 1 ~= 0
        isCo = not isDecimal
        if isDecimal then
            cIndex = cIndex + 0.5
        end
    elseif data.alignment_type == 2 then
        -- 向后
        cIndex = #data.npc_list - 1
    end

    if cIndex > index then
        -- 向后插值
        local offs = Mathf.Abs(cIndex - index)
        local t = rat * offs
        t = isCo and t - (rat / 2) or t
        return self:ExtendPointOnLine(startPos, endPos, -t)
    elseif Mathf.Abs(cIndex - index) < 0.001 then
        -- 居中
        if isCo then
            local t = rat / 2
            return self:ExtendPointOnLine(startPos, endPos, -t)
        else
            return startPos
        end
    elseif cIndex < index then
        -- 向前
        local offs = Mathf.Abs(cIndex - index)
        local t = rat * offs
        t = isCo and t + (rat / 2) or t
        return self:ExtendPointOnLine(startPos, endPos, t)
    end
end

function P2pPathData:ExtendPointOnLine(startPos, endPos, extendFactor)

    -- 如果是延长系数为-1.，则返回起点的反方向
    if Mathf.Abs(extendFactor - (-1)) < 0.01 then
        return self:TempV3Sub(startPos, self:TempV3Sub(endPos, startPos))
    end

    if extendFactor < 0 then
        local v3 = self:TempV3Sub(startPos, endPos)
        v3 = self:TempV3Multiply(v3, Mathf.Abs(extendFactor))
        return self:TempV3Add(startPos, v3)
    end

    -- 计算延长线的位置
    local extendedPoint = self:TempV3Sub(endPos, startPos)
    extendedPoint = self:TempV3Multiply(extendedPoint, extendFactor)
    return self:TempV3Add(startPos, extendedPoint)
end

function P2pPathData:TempV3Add(aTab, bTab)
    return { aTab[1] + bTab[1], aTab[2] + bTab[2], aTab[3] + bTab[3] }
end

function P2pPathData:TempV3Sub(aTab, bTab)
    return { aTab[1] - bTab[1], aTab[2] - bTab[2], aTab[3] - bTab[3] }
end

function P2pPathData:TempV3Multiply(tab, scalar)
    return { tab[1] * scalar, tab[2] * scalar, tab[3] * scalar }
end

function P2pPathData:TempV3GetDistance(aTab,bTab)
    local dx = bTab[1] - aTab[1]
    local dy = bTab[2] - aTab[2]
    local dz = bTab[3] - aTab[3]
    return math.sqrt(dx*dx + dy * dy + dz * dz)
end

---@ 获取实例并防止同一时间有相同的实例组出现
function P2pPathData:GetInstModel()
    -- 初始化阶段当前不存在实例模组
    local data = {
        index = 0,
        instGroupCfg = nil,
        units = nil,
        p2pList = self.data.list,
        p2pPotIndex = 0,
    }
    data.index = self:GetRandomElement(self.tempIndexArray)
    data.instGroupCfg = self.instGroupCfgList[data.index]
    return data
end

---@ 获取随机下标
function P2pPathData:GetRandomElement(data)
    local index = math.random(#data)
    return table.remove(data, index)
end

--region -- 记录额外行为占用 --

function P2pPathData:SetExtraBehavior2Occ(index , isOcc)
    if isOcc then
        self.extraBehavior2OccList[index] = true
    else
        self.extraBehavior2OccList[index] = nil
    end
end

function P2pPathData:IsExtraBehaviorOcc(index)
    return self.extraBehavior2OccList[index]
end


--endregion


---@ 回收unit
---@ 当unit到达终点时对其回收
function P2pPathData:RecycleUnit(instGroupId)
    local groupId = math.floor(instGroupId/ 10)
    if self.instGroupList[groupId] then
        -- 频繁回收会导致内存占用过大 不如删除
        local index = instGroupId - groupId *10
        UnitManager.DestroyMinorNpc(instGroupId)
        if #self.instGroupList[groupId].units == 1 then
            self.instGroupList[groupId] = nil
            self.tempNextTimeList[groupId] = nil
            table.insert(self.tempIndexArray, groupId) --重新注入随机队列
            self:NextShowUnit(groupId)
        else
            self.instGroupList[groupId].units[index] = nil
        end
    end
end

---@ 准备显示下一个unit
function P2pPathData:NextShowUnit(instGroupId)
    local time = self:GetIntervalTime()
    self.tempNextTimeList[instGroupId] = Time.GetServerTimeSecond() + time
    local timer = Timer.Start(time, function()
        self:CreateDataInfo2Timer(instGroupId)
    end)
    self.nextShowTimer[instGroupId] = timer
end

function P2pPathData:CreateDataInfo2Timer(index)
    self:CreateDataInfo()
    if self.nextShowTimer[index] then
        Timer.Stop(self.nextShowTimer[index])
        self.nextShowTimer[index] = nil
    end
end

function P2pPathData:GetIntervalTime()
    local time = math.random(self.intervalTime[1], self.intervalTime[2])
    -- instGroupList 中有等待时间接近的点
    local showTime = Time.GetServerTimeSecond() + time
    local timeArray = {}
    for _, t in pairs(self.tempNextTimeList) do
        table.insert(timeArray, t)
    end
    table.sort(timeArray, function(a, b) return a < b end)
    for _, t in pairs(timeArray) do
        if t - RANDOM_TIME_RANGE < showTime and t + RANDOM_TIME_RANGE > showTime then
            time = time + RANDOM_TIME_RANGE
            showTime = showTime + RANDOM_TIME_RANGE
        end
    end
    return time
end

---@ 删除所有unit
function P2pPathData:RecycleAllUnit()
    for id, _ in pairs(self.instGroupList) do
        UnitManager.DestroyMinorNpc(id)
    end
end

return P2pPathData
